Type vagrant status
This command will show you the current status of the virtual machine. It should currently read “default running (virtualbox)” along with some other information.

Type vagrant suspend
This command suspends your virtual machine. All of your work is saved and the machine is put into a “sleep mode” of sorts. The machines state is saved and it’s very quick to stop and start your work. You should use this command if you plan to just take a short break from your work but don’t want to leave the virtual machine running.

Type vagrant up
This gets your virtual machine up and running again. Notice we didn’t have to redownload the virtual machine image, since it’s already been downloaded.

Type vagrant ssh
This command will actually connect to and log you into your virtual machine. Once done you will see a few lines of text showing various performance statistics of the virtual machine along with a new command line prompt that reads vagrant@vagrant-ubuntu-trusty-64:~$

vagrant halt
This command halts your virtual machine. All of your work is saved and the machine is turned off - think of this as “turning the power off”. It’s much slower to stop and start your virtual machine using this command, but it does free up all of your RAM once the machine has been stopped. You should use this command if you plan to take an extended break from your work, like when you are done for the day. The command vagrant up will turn your machine back on and you can continue your work.

vagrant destroy
This command destroys your virtual machine. Your work is not saved, the machine is turned off and forgotten about for the most part. Think of this as formatting the hard drive of a computer. You can always use vagrant up to relaunch the machine but you’ll be left with the baseline Linux installation from the beginning of this course. You should not have to use this command at any time during this course unless, at some point in time, you perform a task on the virtual machine that makes it completely inoperable.

If you cd / and then ls -al, you will see alot of files and folders. The etc folder is where configuration files are. Var is for variable files (files that we expect to grow or change in size over time - typically system and application logs within directory). Bin is where executable binaries are formed (these are applications we run like the ls command - required for boot up and system maintenance processes). sbin is similar to the binaries folder except that these binaries are only to be used by the root user for system administration and maintenance purposes. lib is the libraries that support binaries located around system. usr is for user programs (similar to bin - but these aren't required for bootup and maintenenace). 

$PATH - is the paths that linus will search through to find your commands.

Lesson 2:

sudo
Used to run a command as root.

cat /etc/apt/sources.list
All of available package sources are available up there

How to update installed software:
1. Update package source list using: 'sudo apt-get update'. This just lets the server know what your current version for your apps is vs the current version available
2. Make the upgrade by: 'sudo apt-get upgrade'. This will go ahead and update all old software to latest version.

apt-get is main interface for application functionality

sudo apt-get autoremove - automatically removes packages that are no longer required.

sudo apt-get install finger - installs finger application. Finger will look up various pieces of information about a user and display it into an easy to read format.

You can find packages on your linux distributions list of repositories. For ubuntu see: http://packages.ubuntu.com/

Type finger to use it. It shows information about the users on the linux machine. Can also pass a username to finger application to see additional info (finger username)

/etc/passwd is a file on our system that is used to keep track of all users on the system. 