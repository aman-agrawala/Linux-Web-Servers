Type vagrant status
This command will show you the current status of the virtual machine. It should currently read “default running (virtualbox)” along with some other information.

Type vagrant suspend
This command suspends your virtual machine. All of your work is saved and the machine is put into a “sleep mode” of sorts. The machines state is saved and it’s very quick to stop and start your work. You should use this command if you plan to just take a short break from your work but don’t want to leave the virtual machine running.

Type vagrant up
This gets your virtual machine up and running again. Notice we didn’t have to redownload the virtual machine image, since it’s already been downloaded.

Type vagrant ssh
This command will actually connect to and log you into your virtual machine. Once done you will see a few lines of text showing various performance statistics of the virtual machine along with a new command line prompt that reads vagrant@vagrant-ubuntu-trusty-64:~$

vagrant halt
This command halts your virtual machine. All of your work is saved and the machine is turned off - think of this as “turning the power off”. It’s much slower to stop and start your virtual machine using this command, but it does free up all of your RAM once the machine has been stopped. You should use this command if you plan to take an extended break from your work, like when you are done for the day. The command vagrant up will turn your machine back on and you can continue your work.

vagrant destroy
This command destroys your virtual machine. Your work is not saved, the machine is turned off and forgotten about for the most part. Think of this as formatting the hard drive of a computer. You can always use vagrant up to relaunch the machine but you’ll be left with the baseline Linux installation from the beginning of this course. You should not have to use this command at any time during this course unless, at some point in time, you perform a task on the virtual machine that makes it completely inoperable.

If you cd / and then ls -al, you will see alot of files and folders. The etc folder is where configuration files are. Var is for variable files (files that we expect to grow or change in size over time - typically system and application logs within directory). Bin is where executable binaries are formed (these are applications we run like the ls command - required for boot up and system maintenance processes). sbin is similar to the binaries folder except that these binaries are only to be used by the root user for system administration and maintenance purposes. lib is the libraries that support binaries located around system. usr is for user programs (similar to bin - but these aren't required for bootup and maintenenace). 

$PATH - is the paths that linus will search through to find your commands.

Lesson 2:

sudo
Used to run a command as root.

cat /etc/apt/sources.list
All of available package sources are available up there

How to update installed software:
1. Update package source list using: 'sudo apt-get update'. This just lets the server know what your current version for your apps is vs the current version available
2. Make the upgrade by: 'sudo apt-get upgrade'. This will go ahead and update all old software to latest version.

apt-get is main interface for application functionality

sudo apt-get autoremove - automatically removes packages that are no longer required.

sudo apt-get install finger - installs finger application. Finger will look up various pieces of information about a user and display it into an easy to read format.

You can find packages on your linux distributions list of repositories. For ubuntu see: http://packages.ubuntu.com/

Type finger to use it. It shows information about the users on the linux machine. Can also pass a username to finger application to see additional info (finger username)

/etc/passwd is a file on our system that is used to keep track of all users on the system. The format is: username:password:UID:GID:UID info:home directory:command/shell. 

1. username: the user’s login name
2. password: the password, will simply be an x if it’s encrypted
3. user ID (UID): the user’s ID number in the system. 0 is root, 1-99 are for predefined users, and 100-999 are for other system accounts
4. group ID (GID): Primary group ID, stored in /etc/group.
5. user ID info: Metadata about the user; phone, email, name, etc.
6. home directory: Where the user is sent upon login. Generally /home/
7. command/shell: The absolute path of a command or shell (usually /bin/bash). Does not have to be a shell though!

Note: root user will always have 0 as user id and group id.


User Management: 
To add a user, use the adduser command: sudo adduser. Try making a local student user account.

To connect to the user: use ssh username@ip_address -p port_number. The ip_address shows what you want to connect to. The -p port_number is used to specify what port you desire. For our student account, we would use: ssh student@127.0.0.1 -p 2222. The 127.0.0.1 ip address is a standard local ip address that always means local host or the same computer you are currently on. The -p 2222 flag shows you to connect to port 2222. When vagrant setup the virtual machine it automatically setup this port on the local machine to automatically forward to the virtual machine. If you don't know the correct port you may not have to specify it to login. The sudo password for new accounts is the standard password that they have set. You may have to add the user to the sudoers file (/etc/sudoers) or sudoers.d directory (/etc/sudoers.d). 

Another Authentication Method:
Another method to for authentication is to use public and private key encryption.
TO generate a key pair use: ssh-keygen. You wull first be asked to give a filename and what directory. /Users/Udacity/.ssh/linuxCourse. To install your ssh keys: first login to your users and then create a .ssh folder within home directory. Then create a new file called authorized_keys within the .ssh folder (touch .ssh/authorized_keys). This file shows all the keys that this account can use for authentication with one key per line. Open the .pub file created from the ssh-keygen command and copy that key into the authorized_keys file. Now set permissions onto the .ssh folder using: chmod 700 .ssh and chmod 644 .ssh/authorized_keys

To force key based authentication:
edit the sshd_config file (/etc/ssh/sshd_config) using sudo nano /etc/ssh/sshd_config. Change  PasswordAuthentication to no and save. Then you need to restart service so it re-reads that configuration file:  sudo service ssh restart

File Permissions:
d --- --- --- Each file has 3 pieces of information. The first d indicates a directory. If that d was a - it would mean its a file. 

The first set of --- represents the owner's permissions.
The second set is for group.
The third is for everyone.

If the first set was rw-. This would mean that the owner can read and write the file. The - would mean that the owner cannot execute the file. IF the owner could execute the file it would look like: rwx.

